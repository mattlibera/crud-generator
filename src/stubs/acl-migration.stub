<?php

use App\CcpsCore\Permission;
use App\CcpsCore\Role;
use App\CcpsCore\User;
use Illuminate\Database\Migrations\Migration;
use Illuminate\Support\Facades\Artisan;

class Add{{className}}RolesAndPermissions extends Migration
{
    // role/permission bindings
    protected $bindings;

    /**
     * Constructor
     */
    public function __construct() {
        $this->bindings = {{bindings}}
    }


    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Artisan::call('db:seed', [
            '--class' => 'App\\Seeders\\{{className}}RolesSeeder',
            '--force' => 'true'
        ]);

        Artisan::call('db:seed', [
            '--class' => 'App\\Seeders\\{{className}}PermissionsSeeder',
            '--force' => 'true'
        ]);


        // attach the roles and permissions to one another
        foreach ($this->bindings as $role => $permissions) {
            $roleModel = Role::where('name', $role)->get();
            $roleModel->attachPermissions($permissions);
        }

    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        // which roles?
        $rolesToFind = array_keys($this->bindings);

        // get the roles
        $roleIds = Role::whereIn('name', $rolesToFind)->get()->pluck('id');


        // find users who have the roles
        $usersWithRoles = User::whereHas('roles', function($query) use ($rolesToFind) {
            $query->whereIn('name', $rolesToFind);
        })->get();

        // remove roles from existing users
        foreach($usersWithRoles as $user) {
            $user->roles()->detach($roleIds);
        }

        // get the permissions
        foreach($this->bindings as $role => $permissions) {
            $roleModel = Role::where('name', $role)->get();
            $roleModel->detachPermissions($permissions);
            $deletedPermissions = Permission::whereIn('name', $permissions)->delete();
            $deletedRole = $roleModel->delete();
        }
    }
}
